apiVersion: scaffolder.backstage.io/v1beta3
# https://backstage.io/docs/features/software-catalog/descriptor-format#kind-template
kind: Template
metadata:
  name: example-kubernetes-template
  title: Example Kubernetes Template
  description: An example template for the scaffolder that creates a simple Kubernetes service
spec:
  owner: meli/infra
  type: service

  # These parameters are used to generate the input form in the frontend, and are
  # used to gather input data for the execution of the template.
  parameters:
    - title: Project configurations
      required: [name, title, description, namespace]
      properties:
        name:
          title: Name
          type: string
          description: Unique name of the project
          ui:autofocus: true
        title:
          title: title
          type: string
          description: Friendly name of the project that will be displayed in the README and catalog.
        description:
          title: Description
          type: string
          description: Brief description of your project.
          ui.options:
            rows: 5
        namespace:
          title: namespace
          type: string
          description: Kubernetes namespace for the application. Use only letters and hyphens.
        owner:
          title: Owner(s)
          type: string
          description: Team responsible for the project.
          ui:field: OwnerPicker
          ui.options:
            allowedKinds: [Group]
    - title: Choose a location
      required:
        - repoUrl
      properties:
        repoUrl:
          title: Repository Location
          type: string
          ui:field: RepoUrlPicker
          ui:options:
            allowedHosts:
              - github.com

  # These steps are executed in the scaffolder backend, using data that we gathered
  # via the parameters above.
  steps:
    # Each step executes an action, in this case one templates files into the working directory.
    - id: template
      name: Fetch Skeleton + Template
      action: fetch:template
      input:
        url: ./template
        # copyWithoutRender:
        #   - .github/workflows/*
        values:
          name: ${{ parameters.name }}
          title: ${{ parameters.title }}
          description: ${{ parameters.description }}
          namespace: ${{ parameters.namespace }}
          destination: ${{ parseRepoUrl parameters.repoUrl }}
          owner: ${{ parameters.owner }}

    # This step publishes the contents of the working directory to GitHub.
    - id: publish
      name: Publish
      action: publish:github
      input:
        allowedHosts: ['github.com']
        description: ${{ parameters.description }}
        repoUrl: ${{ parameters.repoUrl }}

    # The final step is to register our new component in the catalog.
    - id: register
      name: Register
      action: catalog:register
      input:
        repoContentsUrl: ${{ steps.publish.output.repoContentsUrl }}
        catalogInfoPath: '/catalog-info.yaml'

  # Outputs are displayed to the user after a successful execution of the template.
  output:
    links:
      - title: Repository
        url: ${{ steps.publish.output.remoteUrl }}
      - title: Open in catalog
        icon: catalog
        entityRef: ${{ steps.register.output.entityRef }}
